stages:
  - linting-stylecheck
  - build-sample-projects
  - testing
  - build-docker-images
  - continuous-delivery

# ==================================
#  Linting the applications here
# ==================================
lint-sc-deployus:
  stage: linting-stylecheck
  image: 
    name: cytopia/pylint:latest-0.3 # Why reinvent the wheel?
    entrypoint: ["/bin/sh", "-c"]
  script:    
    - apk add py3-pip
    - cd DeployUS
    - pip3 install pycodestyle -r requirements.txt -r tests/requirements.txt
    - pylint app tests run.py

    # Going one step furthur and ensuring PEP8 styling. 
    # Changing max line length to 100 because I disagree with the default 79.
    - pycodestyle --max-line-length=100 app tests run.py

lint-watchus:
  stage: linting-stylecheck
  image: 
    name: cytopia/golint:latest-0.1 # Why reinvent the wheel?
    entrypoint: ["/bin/sh", "-c"]
  script:    
    - cd WatchUS
    - golint -set_exit_status main.go
    - golint -set_exit_status tests

sc-watchus:
  stage: linting-stylecheck
  image: 
    name: cytopia/gofmt:latest-0.1 # Why reinvent the wheel?
    entrypoint: ["/bin/sh", "-c"]
  script:    
    - /docker-entrypoint.sh --ci WatchUS

lint-workus:
  stage: linting-stylecheck
  image: 
    name: cytopia/golint:latest-0.1 # Why reinvent the wheel?
    entrypoint: ["/bin/sh", "-c"]
  script:    
    - cd WorkUS
    - golint -set_exit_status main.go
    - golint -set_exit_status tests

sc-workus:
  stage: linting-stylecheck
  image: 
    name: cytopia/gofmt:latest-0.1 # Why reinvent the wheel?
    entrypoint: ["/bin/sh", "-c"]
  script:    
    - /docker-entrypoint.sh --ci WorkUS

# ==========================
#  Building Sample Projects
# ==========================
build-sp-hello-world:
  stage: build-sample-projects
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd ./sample-projects/helloworld/
    - docker build -t shawnvosburg/helloworld .
    - docker login -u shawnvosburg -p $DOCKER_HUB_VOSS2502
    - docker push shawnvosburg/helloworld:latest



# ==================================
#  Testing the images here
# ==================================
tests-deployus:
  stage: testing
  image: 
    name: docker:20.10
  services:
    - docker:20.10-dind
  script:
    - apk add --no-cache python3 docker-compose
    - python3 run_tests.py --test DeployUS

tests-watchus:
  stage: testing
  image: 
    name: docker:20.10
  services:
    - docker:20.10-dind
  script: 
    - apk add --no-cache python3 docker-compose
    - python3 run_tests.py --test WatchUS

tests-workus:
  stage: testing
  image: 
    name: docker:20.10
  services:
    - docker:20.10-dind
  script: 
    - apk add --no-cache python3 docker-compose
    - python3 run_tests.py --test WorkUS

# ========================================================================
#  Building docker images. Also pushing them to docker hub
# ========================================================================
build-images:
  stage: build-docker-images
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u shawnvosburg -p $DOCKER_HUB_VOSS2502

    # DeployUS
    - cd ./DeployUS
    - docker build -t shawnvosburg/deployus .
    - docker push shawnvosburg/deployus:latest
    - cd ..

    # DeployUS-Database
    - cd ./DeployUS
    - docker build -f Dockerfile.db -t shawnvosburg/deployusdb .
    - docker push shawnvosburg/deployusdb:latest
    - cd ..
    
    # WatchUS
    - cd ./WatchUS
    - docker build -t shawnvosburg/watchus .
    - docker push shawnvosburg/watchus:latest
    - cd ..

    # WorkUS
    - cd ./WorkUS
    - docker build -t shawnvosburg/workus .
    - docker push shawnvosburg/workus:latest
    - cd ..

# ==================================
#  Performing continuous delivery
# ==================================
continuous-delivery:
  stage: continuous-delivery
  image: 
    name: python:3.8-alpine
  script:
    - python3 continuous-delivery/cd.py
  only:
    - TP3