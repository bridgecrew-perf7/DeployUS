stages:
  - linting-stylecheck
  - build-docker-images
  - testing

# ==================================
#  Linting the applications here
# ==================================
lint-sc-deployus:
  stage: linting-stylecheck
  image: 
    name: cytopia/pylint # Why reinvent the wheel?
  entrypoint: ["sh"]
  script:    
    - cd DeployUS
    - pip3 install pycodestyle -r tests/requirements.txt
    - pylint app tests run.py

    # Going one step furthur and ensuring PEP8 styling. 
    # Changing max line length to 100 because I disagree with the default 79.
    - pycodestyle --max-line-length=100 app tests run.py

# ==========================
#  Building Sample Projects
# ==========================
build-sp-hello-world:
  stage: build-docker-images
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd ./sample-projects/helloworld/
    - docker build -t shawnvosburg/helloworld .
    - docker login -u shawnvosburg -p $DOCKER_HUB_VOSS2502
    - docker push shawnvosburg/helloworld:latest

# ========================================================================
#  Building docker images. Also pushing them to docker hub
# ========================================================================
build-images:
  stage: build-docker-images
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u shawnvosburg -p $DOCKER_HUB_VOSS2502

    # DeployUS
    - cd ./DeployUS
    - docker build -t shawnvosburg/deployus .
    - docker push shawnvosburg/deployus:latest
    - cd ..

    # DeployUS-Database
    - cd ./DeployUS
    - docker build -f Dockerfile.db -t shawnvosburg/deployusdb .
    - docker push shawnvosburg/deployusdb:latest
    - cd ..
    
    # WatchUS
    - cd ./WatchUS
    - docker build -t shawnvosburg/watchus .
    - docker push shawnvosburg/watchus:latest
    - cd ..


# ==================================
#  Testing the created images here
# ==================================
tests-deployus:
  stage: testing
  image: 
    name: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - apk update
    - apk add --no-cache docker-compose py3-pip python3
    - pip3 install --upgrade pip
    - cd DeployUS/tests
    - pip3 install -r requirements.txt
    - cd ../

  script:    
    - python3 tests/run_tests.py

tests-watchus:
  stage: testing
  image: 
    name: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - apk update
    - apk add --no-cache python3
    - cd WatchUS
  script:    
    - python3 tests/run_tests.py